/* 91. Decode Ways
Medium

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26

Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).

Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Accepted
278,861
Submissions
1,230,795 */

#include <bits/stdc++.h>

using namespace std;

class Solution {
public:
    int CombValid(char c1, char c2) {
        int val =  (c1-'0')*10 + c2 - '0';
        return val <= 26;
    }
    int numDecodings(string s) {
        vector<int> dp(max(s.size(), static_cast<size_t>(2)), 0);
        dp[0] = 1;
        dp[1] = 1;
        if (s.size() >= 2 && CombValid(s[0], s[1]))
            dp[1] = 2;
        for (size_t i=2; i<s.size(); i++) {
            dp[i] = dp[i-1];
            if (CombValid(s[i-1], s[i])) {
                dp[i] = dp[i-2] + dp[i-1];
            }
        }
        cout << "decode ways " << dp.back() << ", " << dp[s.size()-2] << endl;
        return dp[s.size()-1];
    }
};

/*
"12", 2
"226" 3
"12324", 6: 1 2 3 2 4, 12 3 2 4, 12 3 24, 1 23 2 4, 1 23 24, 1 2 3 24,
"781327213", 6
 */

int main() {
	tuple<string, int> tcs[] {
		{ "12", 2 },
		{ "226", 3 },
		{ "12324", 6 },
        { "1212", 5 },
        { "12121", 8 },
        { "121212", 13 },
        { "12121212", 34 },
		{ "781327213", 6 },
		{ "12121212121212", 610 },
        {},
	};
	int tcIdx = 0;
	for (auto tc : tcs) {
		cout << "case " << tcIdx++ << " : " << get<0>(tc) << endl;
		cout << "expect " << get<1>(tc) << endl;
		Solution sln;
		auto ret = sln.numDecodings(get<0>(tc));
		cout << "ret " << ret << " " << (ret != get<1>(tc) ? "** WRONG **" : "OK") << endl;
		cout << endl;
	}
}