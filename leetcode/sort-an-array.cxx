/* 912. Sort an Array
Medium

Given an array of integers nums, sort the array in ascending order.

 

Example 1:

Input: [5,2,3,1]
Output: [1,2,3,5]

Example 2:

Input: [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]

 

Note:

    1 <= A.length <= 10000
    -50000 <= A[i] <= 50000

Accepted
29,480
Submissions
46,898 */

#include <bits/stdc++.h>

using namespace std;

template<typename Type>
void printVector(vector<Type> vec) {
	cout << "[ ";
	for (size_t i=0; i<vec.size(); i++) {
		auto& val = vec[i];
		cout << val;
		if (i != vec.size()-1)
			cout << ", ";
	}
	cout << " ]" << endl;
}

template<typename It>
void printRange(It first, It last) {
	cout << "[ ";
	while (first != last) {
		cout << *first;
		if (++first != last)
			cout << ", ";
	}
	cout << " ]" << endl;
}

/* 68ms, 12.8MB */
class Solution {
public:
    template <class RandomAccessIterator, class Compare>
    RandomAccessIterator partition(RandomAccessIterator first, RandomAccessIterator last, Compare comp)
    {
        if (first == last || first+1 == last)
            return first;
        auto pv = *first;
        auto it1 = first;
        auto it2 = last-1;
        while (it1 < it2) {
            while (it1 < it2 && comp(*it1, pv)) {
                it1++;
            };
            while (it2 > it1 && !comp(*it2, pv)) {
                it2--;
            };
			if (it1 != it2)
            	swap(*it1, *it2);
        }
		return it1;
    }
    template <class RandomAccessIterator, class Compare>
    void quicksort(RandomAccessIterator first, RandomAccessIterator last, Compare comp)
    {
        if (first == last /* || first+1 == last */)
            return;
        auto pivot = partition(first, last, comp);
#if 0
		printRange(first, pivot);
		printRange(pivot, last);
		cout << endl;
#endif
        quicksort(first, pivot, comp);
		if (pivot == first)
			pivot++;
        quicksort(pivot, last, comp);
    }
    vector<int> sortArray(vector<int>& nums) {
		auto ltcomp = [](int a, int b) -> bool {
			return a < b;
		};
        quicksort(nums.begin(), nums.end(), ltcomp);
		return nums;
    }

	template <typename ConT, typename Compare>
	bool isSorted(ConT cont, Compare comp)
	{
		for (auto it = cont.begin(); it+1 != cont.end(); it++) {
			if (!comp(*it, *(it+1)))
				return false;
		}
		return true;
	}
	bool isArraySorted(vector<int>& nums) {
		auto lecomp = [](int a, int b) -> bool {
			return a <= b;
		};
		return isSorted(nums, lecomp);
	}
};

/* 64ms, 12.4MB */
class Solution2 {
public:
    vector<int> sortArray(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums;
    }
};

/* insert sort, 60ms > 90%, 16.8MB */
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int iMin = -50000;
        int iMax = 50000;
        for (size_t i=0; i<nums.size(); i++) {
            if (nums[i] < iMin)
                iMin = nums[i];
            if (nums[i] > iMax)
                iMax = nums[i];
        }
        vector<int> inserted(iMax - iMin + 1, 0);
        for (auto i : nums ) {
            ++inserted[i-iMin];
        }
        int idx = 0;
        for (size_t i=0; i<inserted.size(); i++) {
            for (int j = 0; j < inserted[i]; j++)
                nums[idx++] = i+iMin;
        }
        return nums;
    }
};


int main()
{
	vector<int> tcs[] {
		{ 5,2,3,1 },
		{ 5,1,1,2,0,0 },
		{ 9, 4, 8, 4, 4, 5, 2, 6, 9, 1 },
		{ 404, 186, 324, 525, 730, 526, 242, 349, 950, 209, 923, 351, 835, 71, 613, 434, 140, 634, 80, 512, 499, 861, 552, 170, 9, 750, 890, 27, 165, 82, 326, 130, 821, 988, 186, 190, 546, 12, 749, 374, 14, 513, 485, 945, 623, 519, 843, 241, 740, 233, 55, 697, 198, 46, 901, 409, 666, 302, 607, 222, 886, 244, 416, 616, 644, 810, 228, 486, 276, 908, 850, 317, 32, 823, 985, 708, 876, 150, 467, 368, 379, 126, 38, 102, 247, 662, 990, 171, 927, 177, 469, 995, 344, 256, 780, 848, 402, 753, 754, 758, 482, 558, 530, 787, 343, 187, 322, 199, 589, 776, 350, 759, 363, 93, 289, 390, 701, 931, 164, 606, 962, 979, 999, 916, 64, 232, 545, 678, 769, 999, 630, 215, 812, 617, 106, 665, 998, 716, 880, 20, 304, 89, 624, 804, 463, 205, 893, 443, 759, 6, 356, 942, 114, 412, 364, 899, 802, 801, 725, 793, 416, 864, 984, 294, 205, 643, 419, 512, 978, 476, 221, 751, 206, 10, 582, 993, 911, 780, 414, 601, 680, 824, 844, 430, 458, 787, 795, 284, 89, 87, 738, 135, 829, 905, 251, 692, 508, 911, 708, 617, 142, 671, 806, 809, 165, 765, 107, 188, 504, 370, 684, 581, 255, 837, 218, 388, 994, 563, 343, 545, 926, 877, 252, 67, 390, 880, 997, 78, 690, 524, 773, 701, 261, 192, 515, 105, 864, 173, 973, 597, 134, 181, 543, 977, 615, 577, 11, 621, 525, 949, 251, 485, 124, 626, 938, 360, 349, 354, 758, 595, 755, 46, 898, 682, 476, 843, 504, 822, 13, 568, 209, 294, 20, 364, 857, 301, 103, 978, 844, 23, 467, 541, 272, 602, 695, 95, 394, 742, 452, 705, 60, 754, 602, 116, 244, 425, 917, 392, 646, 664, 731, 59, 331, 830, 868, 335, 720, 231, 343, 765, 755, 352, 441, 256, 252, 238, 780, 443, 720, 713, 124, 59, 573, 186, 389, 997, 649, 588, 469, 401, 373, 484, 106, 32, 182, 837, 804, 154, 493, 354, 945, 769, 218, 807, 566, 379, 392, 429, 960, 55, 585, 885, 602, 640, 518, 688, 281, 286, 561, 538, 471, 574, 619, 895, 980, 525, 162, 125, 135, 959, 625, 910, 198, 729, 489, 801, 994, 844, 308, 32, 927, 571, 376, 733, 783, 435, 413, 232, 20, 160, 593, 302, 711, 818, 207, 905, 279, 880, 637, 562, 934, 802, 838, 475, 878, 295, 253, 212, 817, 426, 875, 903, 540, 791, 933, 14, 952, 80, 869, 109, 536, 733, 28, 163, 99, 574, 753, 117, 549, 995, 421, 30, 701, 244, 831, 902, 827, 258, 502, 881, 369, 238, 428, 181, 335, 862, 35, 146, 54, 674, 721, 989, 892, 380, 90, 881, 48, 730, 246, 777, 982, 748, 518, 181, 80, 198, 623, 888, 335, 684, 504, 735, 91, 311, 576, 67, 171, 103, 322, 617, 970, 42, 670, 160, 291, 225, 198, 961, 138, 78, 132, 212, 611, 242, 337, 740, 877, 360, 128, 680, 474, 487, 489, 440, 471, 486, 680, 746, 506, 727, 922, 583, 216, 32, 473, 171, 680, 195, 737, 747, 679, 855, 432, 842, 883, 879, 148, 316, 169, 420, 375, 206, 178, 450, 984, 767, 107, 907, 353, 205, 738, 13, 553, 152, 473, 6, 302, 9, 944, 33, 367, 846, 313, 21, 521, 993, 409, 244, 584, 251, 14, 79, 74, 553, 257, 473, 729, 847, 531, 407, 292, 909, 228, 835, 148, 287, 47, 817, 160, 215, 203, 648, 199, 17, 527, 319, 354, 256, 201, 334, 685, 389, 375, 525, 605, 422, 873, 632, 464, 312, 358, 550, 446, 117, 400, 802, 491, 663, 365, 598, 584, 886, 956, 285, 520, 161, 378, 945, 515, 988, 683, 259, 729, 451, 143, 303, 822, 286, 460, 220, 36, 938, 314, 879, 41, 344, 306, 348, 825, 701, 826, 507, 704, 520, 275, 273, 125, 733, 296, 116, 461, 965, 379, 866, 97, 886, 596, 657, 75, 903, 595, 262, 853, 382, 383, 819, 255, 115, 271, 350, 991, 73, 265, 438, 979, 14, 429, 780, 948, 135, 863, 86, 910, 158, 696, 164, 818, 448, 717, 745, 530, 51, 629, 828, 738, 913, 533, 964, 298, 801, 865, 771, 545, 218, 194, 117, 423, 278, 758, 865, 469, 928, 174, 23, 42, 864, 654, 786, 839, 634, 404, 938, 80, 449, 455, 262, 669, 34, 73, 863, 660, 916, 944, 150, 139, 958, 507, 502, 833, 528, 466, 300, 919, 368, 471, 53, 763, 372, 73, 283, 494, 524, 620, 682, 27, 294, 519, 502, 172, 618, 544, 411, 758, 690, 325, 658, 348, 422, 513, 852, 53, 463, 195, 485, 31, 414, 798, 514, 974, 864, 829, 967, 103, 176, 794, 531, 364, 813, 267, 401, 144, 105, 526, 228, 367, 589, 735, 447, 11, 448, 48, 383, 461, 882, 502, 90, 772, 703, 45, 117, 904, 379, 611, 402, 175, 62, 148, 192, 523, 587, 952, 770, 340, 208, 659, 462, 676, 287, 82, 658, 980, 39, 685, 60, 632, 805, 28, 992, 873, 689, 695, 989, 534, 165, 572, 68, 71, 899, 844, 615, 55, 411, 8, 981, 376, 211, 571, 590, 419, 54, 712, 441, 214, 729, 351, 541, 818, 385, 61, 41, 93, 179, 345, 406, 414, 174, 746, 418, 127, 463, 501, 152, 0, 804, 131, 253, 924, 694, 533, 931, 879, 681, 315, 101, 814, 125, 869, 593, 852, 894, 523, 294, 175, 782, 687, 119, 144, 350, 219, 146, 904, 85, 473, 677, 764, 976, 749, 967, 209, 810, 198, 330, 92, 986, 258, 455, 18, 378, 192, 315, 426, 43, 299, 634, 3, 901, 403, 292, 406, 121, 685, 67, 333, 272, 983, 61, 287, 438, 45, 609, 817, 958, 346, 259, 423, 853, 940, 108, 517, 14, 887, 249, 43, 222, 721, 924, 507, 640, 955, 81, 9, 86, 277, 652, 438, 99, 35, 502, 236, 910, 10, 738, 295, 913, 690, 927, 920, 413, 11, 567, 225, 518, 128, 875, 246, 744, 909, 65, 206, 117,  } 
	};
	for (auto &tc : tcs) {
		Solution sln;
		auto ret = std::move(sln.sortArray(tc));
		bool sorted = sln.isArraySorted(ret);
		if (!sorted)
			printVector(ret);
		cout << "array is " << (!sorted ? "not " : "") << "sorted" << endl;
	}
}