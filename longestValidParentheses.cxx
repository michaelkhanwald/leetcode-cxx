#include <iostream>
#include <iomanip>
#include <string>
#include <stack>
#include <cstring>

using namespace std;

class Solution
{
public:
	int longestValidParentheses(string s)
	{
		int max_par = 0;
		stack<int> stk;
		stk.push(-1);
		for (int i=0; i<s.length(); i++) {
			if (s[i] == '(') {
				stk.push(i);
			} else {
				stk.pop();
				if (stk.empty()) // invalid, start again
					stk.push(i);
				else
					max_par = max(max_par, i - stk.top());
			}
		}
		return max_par;
	}
};

int main(int argc, char *argv[])
{
	if (argc > 1)
	{
		Solution sln;
		string s(argv[1]);
		cout << endl
			 << "try argv[1]: " << s << endl;
		int ret = sln.longestValidParentheses(s);
		cout << "ret " << ret << endl;
		return 0;
	}
	string sArray[] = {
		"",
		"()",
		"(",
		")",
		"((",
		"))",
		"(()",
		"(())",
		"((()",  //2
		")()()",
		"()(()",  //2
		"(()(()",
		"(()())",
		")()())",
		"(()))))",
		"(())()",
		"(())(())",
		"(())(())(())",
		"(()()()()((())",
		")()()()()()()()",
		")()())((((()))(())))))))",  //14 = ")()()) (( ((())) (()) )) ))))" //14
		//")(()(()(((())(((((()()))((((()()(()()())())())()))()()()())(())()()(((()))))()((()))(((())()((()()())((())))(())))())((()())()()((()((())))))((()(((((()((()))(()()(())))((()))()))())",  //132
		
		"((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))"
	};
	for (auto s : sArray)
	{
		Solution sln;
		cout << endl
			 << "try { len " << s.length() << " } " << s << endl;
		int ret = sln.longestValidParentheses(s);
		cout << "ret " << ret << endl;
	}
	return 0;
}